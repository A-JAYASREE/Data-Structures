:#include <stdio.h>
#include <stdlib.h>
#include <conio.h> // For Turbo C++ specific console I/O functions

#define ORDER 5
#define MIN_KEYS (ORDER / 2)

typedef struct Node {
    int keys[ORDER - 1];
    struct Node* children[ORDER];
    int leaf;
    int num_keys;
} Node;

// Function to create a new node
Node* create_node(int leaf) {
    Node* node = (Node*)malloc(sizeof(Node));
    node->leaf = leaf;
    node->num_keys = 0;
    int i;
    for (i = 0; i < ORDER; i++) {
        node->children[i] = NULL;
    }
    return node;
}

// Function to insert a key into a node
void insert_key(Node* node, int key) {
    int i = node->num_keys - 1;
    while (i >= 0 && key < node->keys[i]) {
        node->keys[i + 1] = node->keys[i];
        i--;
    }
    node->keys[i + 1] = key;
    node->num_keys++;
}

// Function to split a child node
void split_child(Node* parent, int index) {
    Node* child = parent->children[index];
    Node* new_child = create_node(child->leaf);
    int mid = (ORDER - 1) / 2;
    int i;

    for (i = mid + 1; i < ORDER - 1; i++) {
        new_child->keys[i - mid - 1] = child->keys[i];
        child->keys[i] = 0;
    }

    if (!child->leaf) {
        for (i = mid + 1; i < ORDER; i++) {
            new_child->children[i - mid - 1] = child->children[i];
            child->children[i] = NULL;
        }
    }

    parent->children[index + 1] = new_child;

    for (i = parent->num_keys; i >= index + 1; i--) {
        parent->children[i + 1] = parent->children[i];
    }

    for (i = parent->num_keys - 1; i >= index; i--) {
        parent->keys[i + 1] = parent->keys[i];
    }

    parent->keys[index] = child->keys[mid];
    child->num_keys = mid;
    new_child->num_keys = ORDER - 1 - mid;
    parent->num_keys++;
}

// Function to insert a key into a non-full node
void insert_non_full(Node* node, int key) {
    int i = node->num_keys - 1;
    if (node->leaf) {
        insert_key(node, key);
    } else {
        while (i >= 0 && key < node->keys[i]) {
            i--;
        }
        i++;
        if (node->children[i]->num_keys == ORDER - 1) {
            split_child(node, i);
            if (key > node->keys[i]) {
                i++;
            }
        }
        insert_non_full(node->children[i], key);
    }
}
// Function to insert a key into the B-Tree
void insert(Node** root, int key) {
    Node* node = *root;
    if (node == NULL) {
        *root = create_node(1);
        (*root)->keys[0] = key;
        (*root)->num_keys = 1;
        return;
    }
    if (node->num_keys == ORDER - 1) {
        Node* new_root = create_node(0);
        new_root->children[0] = node;
        split_child(new_root, 0);
        insert_non_full(new_root, key);
        *root = new_root;
    } else {
        insert_non_full(node, key);
    }
}

// Function to search for a key in the B-Tree
int search(Node* node, int key) {
    int i = 0;
    while (i < node->num_keys && key > node->keys[i]) {
        i++;
    }
    if (i < node->num_keys && key == node->keys[i]) {
        return 1;
    } else if (node->leaf) {
        return 0;
    } else {
        return search(node->children[i], key);
    }
}

// Function to get the predecessor of a key
Node* get_predecessor(Node* node, int idx) {
    Node* cur = node->children[idx];
    while (!cur->leaf) {
        cur = cur->children[cur->num_keys];
    }
    return cur;
}

// Function to get the successor of a key
Node* get_successor(Node* node, int idx) {
    Node* cur = node->children[idx + 1];
    while (!cur->leaf) {
        cur = cur->children[0];
    }
    return cur;
}
// Function to merge nodes
void merge_nodes(Node* node, Node* parent, int idx) {
    Node* child = node->children[idx];
Node* sibling = node->children[idx + 1];

    int mid = node->keys[idx];
    int i;

    child->keys[MIN_KEYS - 1] = mid;
    for (i = 0; i < sibling->num_keys; i++) {
        child->keys[i + MIN_KEYS] = sibling->keys[i];
    }

    if (!child->leaf) {
        for (i = 0; i <= sibling->num_keys; i++) {
            child->children[i + MIN_KEYS] = sibling->children[i];
        }
    }

    for (i = idx + 1; i < parent->num_keys; i++) {
        parent->keys[i - 1] = parent->keys[i];
    }
    for (i = idx + 2; i <= parent->num_keys; i++) {
        parent->children[i - 1] = parent->children[i];
    }

    child->num_keys += sibling->num_keys + 1;
    parent->num_keys--;

    free(sibling);
}

// Function to balance the tree after deletion
void balance_tree(Node* parent, int idx) {
    if (idx != 0 && parent->children[idx - 1]->num_keys > MIN_KEYS) {
        Node* child = parent->children[idx];
        Node* sibling = parent->children[idx - 1];
        int i;
        for (i = child->num_keys - 1; i >= 0; i--) {
            child->keys[i + 1] = child->keys[i];
        }
        if (!child->leaf) {
            for (i = child->num_keys; i >= 0; i--) {
                child->children[i + 1] = child->children[i];
            }
        }
        child->keys[0] = parent->keys[idx - 1];
        if (!child->leaf) {
            child->children[0] = sibling->children[sibling->num_keys];
        }
        parent->keys[idx - 1] = sibling->keys[sibling->num_keys - 1];
        child->num_keys++;
        sibling->num_keys--;
    } else if (idx != parent->num_keys && parent->children[idx + 1]->num_keys > MIN_KEYS) {
        Node* child = parent->children[idx];
        Node* sibling = parent->children[idx + 1];
        child->keys[child->num_keys] = parent->keys[idx];
        if (!child->leaf) {
            child->children[child->num_keys + 1] = sibling->children[0];
        }
        parent->keys[idx] = sibling->keys[0];
        int i;
        for (i = 1; i < sibling->num_keys; i++) {
            sibling->keys[i - 1] = sibling->keys[i];
        }
        if (!sibling->leaf) {
            for (i = 1; i <= sibling->num_keys; i++) {
                sibling->children[i - 1] = sibling->children[i];
            }
        }
        child->num_keys++;
        sibling->num_keys--;
    } else {
        if (idx != parent->num_keys) {
            merge_nodes(parent, parent, idx);
        } else {
            merge_nodes(parent, parent, idx - 1);
        }
    }
}

// Function to delete a key from a non-empty node
void delete_non_empty(Node* node, int key) {
    int i = 0;
    while (i < node->num_keys && key > node->keys[i]) {
        i++;
    }

    if (i < node->num_keys && key == node->keys[i]) {
        if (node->leaf) {
            int j;
            for (j = i; j < node->num_keys - 1; j++) {
                node->keys[j] = node->keys[j + 1];
            }
            node->num_keys--;
        } else {
            Node* predecessor = get_predecessor(node, i);
            Node* successor = get_successor(node, i);

            if (predecessor->num_keys > MIN_KEYS) {
                int pred_key = predecessor->keys[predecessor->num_keys - 1];
                node->keys[i] = pred_key;
                delete_non_empty(predecessor, pred_key);
            } else if (successor->num_keys > MIN_KEYS) {
                int succ_key = successor->keys[0];
                node->keys[i] = succ_key;
                delete_non_empty(successor, succ_key);
            } else {
                merge_nodes(node, node, i);
                delete_non_empty(predecessor, key);
}
}
} else {
        if (!node->leaf) {
            Node* child = node->children[i];
            delete_non_empty(child, key);
            if (child->num_keys < MIN_KEYS) {
                balance_tree(node, i);
            }
        }
    }
}

// Function to delete a key from the B-Tree
void delete(Node** root, int key) {
    Node* node = *root;
    delete_non_empty(node, key);
    if (node->num_keys == 0) {
        Node* temp = node;
        if (node->leaf) {
            *root = NULL;
        } else {
            *root = node->children[0];
        }
        free(temp);
    }
}

int main() {
    Node* root = NULL;
    int i;

    // Insert 100 random elements
    for (i = 0; i < 100; i++) {
        int key = rand() % 1000;
        insert(&root, key);
    }

    // Search for a key
    int search_key = 42;
    if (search(root, search_key)) {
        printf("Key %d found in the B-Tree\n", search_key);
    } else {
        printf("Key %d not found in the B-Tree\n", search_key);
    }

    // Delete a key
    int delete_key = 21;
    delete(&root, delete_key);

    // Search for the deleted key
    if (search(root, delete_key)) {
        printf("Key %d found in the B-Tree\n", delete_key);
    } else {
        printf("Key %d not found in the B-Tree\n", delete_key);
    }

    getch(); // Pause the output in Turbo C++
    return 0;
}
